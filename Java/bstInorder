private static void inOrder(Node root,ArrayList<Integer> list){
		if(root==null){
			return;
		}
		inOrder(root.left, list);
		list.add(root.data);
		inOrder(root.right, list);
	}
	public static void printPairTarget(Node root,int target){
		ArrayList<Integer> list=new ArrayList<>();
		inOrder(root, list);
		
		int left=0;
		int right=list.size()-1;
		while(left<=right){
			int l=list.get(left);
			int r=list.get(right);
			if(l+r==target){
				System.out.println(l+" "+r);
				left++;
				right--;
			}else if(l+r>target){
				right--;
			}else if(l+r<target){
				left++;
			}
		}
	}
	

	
	private static class orderPair{
		Node node;
		boolean selfDone;
		boolean leftDone;
		boolean rightDone;
	}
	public static void inOrderI(Node root){
		LinkedList<orderPair> stack=new LinkedList<>();
		orderPair op=new orderPair();
		op.node=root;
		stack.addFirst(op);
		while(stack.size()!=0){
			orderPair temp=stack.getFirst();
			 if(!temp.leftDone){
					if(temp.node.left!=null){
						orderPair np=new orderPair();
						np.node=temp.node.left;
						stack.addFirst(np);
						
					}
					temp.leftDone=true;
				}
			 else if(!temp.selfDone){
				System.out.print(temp.node.data+" ");
				temp.selfDone=true;
			}
			
			else if(!temp.rightDone){
				if(temp.node.right!=null){
					orderPair np=new orderPair();
					np.node=temp.node.right;
					stack.addFirst(np);
					
				}
				temp.rightDone=true;
			}
			else{
				stack.removeFirst();
			}
		}
		
	}
	public static int lca(Node root,int data1,int data2){
		if(root==null){
			return -1;
		}
		if(root.data<data1 && root.data<data2){
			return lca(root.right, data1, data2);
		}
		if(root.data>data1 && root.data>data2){
			
		}
		return -1;
	}
	private static class tHelper{
		Node node;
		int status;
		public tHelper(Node node,int status) {
			this.node=node;
			this.status=status;
			// TODO Auto-generated constructor stub
		}
	}
	private static Node iTraversal(Stack<tHelper> stack){
		while(stack.size()>0){
			tHelper th=stack.peek();
			if(th.status==0){
				if(th.node.left!=null){
					stack.push(new tHelper(th.node.left, 0));
				}
				th.status++;
			}else if(th.status==1){
				if(th.node.right!=null){
					stack.push(new tHelper(th.node.right, 0));
				}
				th.status++;
				return th.node;
			}else if(th.status==2){
				stack.pop();
				th.status++;
			}
			
		}
		
		return null;
	}
	private static Node riTraversal(Stack<tHelper> stack){
		while(stack.size()>0){
			tHelper th=stack.peek();
			if(th.status==0){
				if(th.node.right!=null){
					stack.push(new tHelper(th.node.right, 0));
				}
				th.status++;
			}else if(th.status==1){
				if(th.node.left!=null){
					stack.push(new tHelper(th.node.left, 0));
				}
				th.status++;
				return th.node;
			}else if(th.status==2){
				stack.pop();
				th.status++;
			}
			
		}
		
		return null;
	}
